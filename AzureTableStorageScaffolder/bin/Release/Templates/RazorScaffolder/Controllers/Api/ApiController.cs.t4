<#@ Template Language="C#" HostSpecific="True"  #><#@ Output Extension="cs" #><#@ include file="..\..\Imports.include.t4" #><# var viewDataType = (EnvDTE.CodeType) ViewDataType; #><# var fullModelName = Namespace+"."+ViewDataTypeName; #>
using System.Web.Http;
using <#= Namespace #>;
using <#= DefaultNamespace #>.Models;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;

namespace <#= DefaultNamespace #>.Controllers.Api
{
	public class <#= ViewDataTypeName #>Controller: ApiController
	{
		protected <#= DbContextTypeName.Replace(DbContextNamespace + ".", "") #> db = new <#= DbContextTypeName.Replace(DbContextNamespace + ".", "") #>();

<#
	var standardTypes = new List<string>() { typeof(System.String).FullName, typeof(System.Boolean).FullName, typeof(System.Int32).FullName };
	var dateTimePickerTypes = new List<string>() { typeof(System.DateTime).FullName };
#>
		[HttpGet]
		public async Task<IEnumerable<<#= ViewDataTypeName #>>> Get()
		{
			return db.Get<#= PluralizedName #>();
		}

		[HttpGet]
		public async Task<<#= ViewDataTypeName #>> Get(string id)
		{
			var privateEntity = BlueMarble.Shared.Azure.Storage.Table.Entity.GetPrivateEntity(new <#= ViewDataTypeName #>(id));

			return db.Get<#= ViewDataTypeName #>(privateEntity.PartitionKey, privateEntity.RowKey).GetPublicEntity<<#= ViewDataTypeName #>>();
		}

		[HttpPost]
		public string Post(<#= ViewDataTypeName #> entity)
		{
			if (ModelState.IsValid)
			{
				db.Insert<#= ViewDataTypeName #>(entity);

				entity.PublicId = entity.GetPublicId();
				return entity.GetPublicEntity<<#= ViewDataTypeName #>>().PublicId;
			}

            return string.Empty;
		}

		[HttpPut]
		public void Put(string id, <#= ViewDataTypeName #> entity)
		{
			if (ModelState.IsValid)
			{
				db.Update<#= ViewDataTypeName #>(entity.GetPrivateEntity<<#= ViewDataTypeName #>>());
			}
		}

		[HttpDelete]
		public async Task Delete(string id)
		{
			var privateEntity = BlueMarble.Shared.Azure.Storage.Table.Entity.GetPrivateEntity(new <#= ViewDataTypeName #>() { PublicId = id });

			var entity = db.Get<#= ViewDataTypeName #>(privateEntity.PartitionKey, privateEntity.RowKey);
			
            if (entity == null)
                throw new System.Exception("<#= ViewDataTypeName #> entity not found, delete failed.");

			await db.Delete<#= ViewDataTypeName #>Async(entity);
		}

		protected override void Dispose(bool disposing)
        {
            db.Dispose(disposing);
            base.Dispose(disposing);
        }
	}
}