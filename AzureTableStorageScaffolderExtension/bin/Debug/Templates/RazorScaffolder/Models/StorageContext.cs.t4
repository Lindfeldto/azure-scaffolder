<#@ Template Language="C#" HostSpecific="True"  #><#@ Output Extension="cs" #><#@ include file="..\Imports.include.t4" #><# var viewDataType = (EnvDTE.CodeType) ViewDataType; #><# var fullModelName = Namespace+"."+ViewDataTypeName; #>
using <#= Namespace #>;
using <#= DefaultNamespace #>.Models;
using Microsoft.WindowsAzure.Storage.Table;
using BlueMarble.Shared.Azure.Storage.Table;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;

namespace <#= DefaultNamespace #>.Models
{
	public partial class <#= DbContextTypeName.Replace(DbContextNamespace + ".", "") #>
	{
		#region Services

		#region Constants

		internal partial class Constants
		{
			internal partial class StorageTableNames
			{
				public const string <#= PluralizedName #> = "<#= PluralizedName.ToLower() #>"; 
			}

			internal partial class StoragePartitionNames
			{
				public const string <#= ViewDataTypeName #> = "<#= ViewDataTypeName.ToLower() #>"; 
			}
		}

		#endregion

		#region Partition Keys

		public string Get<#= ViewDataTypeName #>PartitionKey(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
		{
			return string.Format("{0}_{1}", 
				Constants.StorageTableNames.<#= PluralizedName #>, 
				<#= ViewDataTypeName #>.PartitionKey);
		}

		public string Get<#= ViewDataTypeName #>RowKey(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
		{
			return string.Format("{0}", 
				<#= ViewDataTypeName #>.RowKey);
		}

		#endregion

		#region Initialize Table

		[InitializeTable]
        public void Initialize<#= ViewDataTypeName #>Tables()
        {
            <#= PluralizedName #> = CloudTableClient.GetTableReference(Constants.StorageTableNames.<#= PluralizedName #>);
            <#= PluralizedName #>.CreateIfNotExists();
        }

		public CloudTable <#= PluralizedName #> { get; set; }

		#endregion

		#region Data Access Methods

		public IQueryable<<#= ViewDataTypeName #>> Get<#= PluralizedName #>()
        {
            var partitionKeyFilter = TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.NotEqual, string.Empty);

            var query = new TableQuery<<#= ViewDataTypeName #>>().Where(partitionKeyFilter);

            var collection = <#= PluralizedName #>.ExecuteQuery(query);

            return collection.AsQueryable();
        }

		public async Task<IQueryable<<#= ViewDataTypeName #>>> Get<#= PluralizedName #>Async()
        {
            var partitionKeyFilter = TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.NotEqual, string.Empty);

            var query = new TableQuery<<#= ViewDataTypeName #>>().Where(partitionKeyFilter);

            var returnList = await ExecuteSegmentedQueryAsync<<#= ViewDataTypeName #>>(query);

            return returnList.AsQueryable();
        }

		public IQueryable<<#= ViewDataTypeName #>> Get<#= PluralizedName #>(string PartitionKey)
        {
            var partitionKeyFilter = TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, PartitionKey);

            var query = new TableQuery<<#= ViewDataTypeName #>>().Where(partitionKeyFilter);

            var collection = <#= PluralizedName #>.ExecuteQuery(query);

            return collection.AsQueryable();
        }

		public async Task<IQueryable<<#= ViewDataTypeName #>>> Get<#= PluralizedName #>Async(string PartitionKey)
        {
            var partitionKeyFilter = TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, PartitionKey);

            var query = new TableQuery<<#= ViewDataTypeName #>>().Where(partitionKeyFilter);

            var returnList = await ExecuteSegmentedQueryAsync<<#= ViewDataTypeName #>>(query);

            return returnList.AsQueryable();
        }

        public <#= ViewDataTypeName #> Get<#= ViewDataTypeName #>(string PartitionKey, string RowKey)
        {
            var partitionKeyFilter = TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, PartitionKey);
			var rowKeyFilter = TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.Equal, RowKey);

			var queryFilter = TableQuery.CombineFilters(partitionKeyFilter, TableOperators.And, rowKeyFilter);

            var query = new TableQuery<<#= ViewDataTypeName #>>().Where(queryFilter);

            var collection = <#= PluralizedName #>.ExecuteQuery(query);

            return collection.FirstOrDefault();
        }

        public async Task<<#= ViewDataTypeName #>> Get<#= ViewDataTypeName #>Async(string PartitionKey, string RowKey)
        {
            var partitionKeyFilter = TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, PartitionKey);
			var rowKeyFilter = TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.Equal, RowKey);

			var queryFilter = TableQuery.CombineFilters(partitionKeyFilter, TableOperators.And, rowKeyFilter);

            var query = new TableQuery<<#= ViewDataTypeName #>>().Where(queryFilter);

            var returnList = await ExecuteSegmentedQueryAsync<<#= ViewDataTypeName #>>(query);

            return returnList.FirstOrDefault();
        }

        public void Insert<#= ViewDataTypeName #>(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
        {
            <#= ViewDataTypeName #>.PartitionKey = Get<#= ViewDataTypeName #>PartitionKey(<#= ViewDataTypeName #>);
			<#= ViewDataTypeName #>.RowKey = Get<#= ViewDataTypeName #>RowKey(<#= ViewDataTypeName #>);
			<#= ViewDataTypeName #>.PublicId = <#= ViewDataTypeName #>.GetPublicId();

            Insert<<#= ViewDataTypeName #>>(<#= ViewDataTypeName #>, <#= PluralizedName #>);
        }

        public async Task Insert<#= ViewDataTypeName #>Async(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
        {
            <#= ViewDataTypeName #>.PartitionKey = Get<#= ViewDataTypeName #>PartitionKey(<#= ViewDataTypeName #>);
			<#= ViewDataTypeName #>.RowKey = Get<#= ViewDataTypeName #>RowKey(<#= ViewDataTypeName #>);
			<#= ViewDataTypeName #>.PublicId = <#= ViewDataTypeName #>.GetPublicId();

            await InsertAsync<<#= ViewDataTypeName #>>(<#= ViewDataTypeName #>, <#= PluralizedName #>);
        }

        public void Insert<#= ViewDataTypeName #>Batch(IEnumerable<<#= ViewDataTypeName #>> <#= PluralizedName #>)
        {
            InsertBatch<<#= ViewDataTypeName #>>(<#= PluralizedName #>, this.<#= PluralizedName #>);
        }

        public async Task Insert<#= ViewDataTypeName #>BatchAsync(IEnumerable<<#= ViewDataTypeName #>> <#= PluralizedName #>)
        {
            await InsertBatchAsync<<#= ViewDataTypeName #>>(<#= PluralizedName #>, this.<#= PluralizedName #>);
        }

        public void Update<#= ViewDataTypeName #>(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
        {
            Replace<<#= ViewDataTypeName #>>(<#= ViewDataTypeName #>, <#= PluralizedName #>);
        }

        public async Task Update<#= ViewDataTypeName #>Async(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
        {
            await ReplaceAsync<<#= ViewDataTypeName #>>(<#= ViewDataTypeName #>, <#= PluralizedName #>);
        }

        public void Delete<#= ViewDataTypeName #>(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
        {
            Delete<<#= ViewDataTypeName #>>(<#= ViewDataTypeName #>, <#= PluralizedName #>);
        }

        public async Task Delete<#= ViewDataTypeName #>Async(<#= ViewDataTypeName #> <#= ViewDataTypeName #>)
        {
            await DeleteAsync<<#= ViewDataTypeName #>>(<#= ViewDataTypeName #>, <#= PluralizedName #>);
        }

		#endregion

        #endregion
	}
}